"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/websocket-manager.ts":
/*!**********************************!*\
  !*** ./lib/websocket-manager.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketManager: function() { return /* binding */ WebSocketManager; }\n/* harmony export */ });\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! socket.io-client */ \"(app-pages-browser)/./node_modules/socket.io-client/build/esm/index.js\");\n\nclass WebSocketManager {\n    static getInstance() {\n        if (!WebSocketManager.instance) {\n            WebSocketManager.instance = new WebSocketManager();\n        }\n        return WebSocketManager.instance;\n    }\n    initializeSocket(url) {\n        console.log(\"[DEBUG] WebSocketManager: Initializing socket with URL:\", url);\n        try {\n            this.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_0__.io)(url, {\n                transports: [\n                    \"websocket\"\n                ],\n                reconnection: true,\n                reconnectionAttempts: this.maxReconnectAttempts,\n                reconnectionDelay: this.reconnectDelay,\n                reconnectionDelayMax: this.maxReconnectDelay,\n                timeout: 20000,\n                autoConnect: false,\n                withCredentials: true,\n                path: \"/socket.io\"\n            });\n            console.log(\"[DEBUG] WebSocketManager: Socket instance created:\", !!this.socket);\n            this.setupEventHandlers();\n        } catch (error) {\n            console.error(\"[DEBUG] WebSocketManager: Failed to initialize socket:\", error);\n            this.notifyError(\"Socket initialization failed: \".concat(error.message));\n        }\n    }\n    setupEventHandlers() {\n        console.log(\"[DEBUG] WebSocketManager: Setting up event handlers\");\n        if (!this.socket) {\n            console.warn(\"[DEBUG] WebSocketManager: Cannot setup event handlers: socket not initialized\");\n            return;\n        }\n        this.socket.on(\"connect\", ()=>{\n            console.log(\"[DEBUG] WebSocketManager: Connected to WebSocket server with ID:\", this.socket.id);\n            this.isConnected = true;\n            this.reconnectAttempts = 0;\n            this.flushAudioBuffer();\n            this.notifyConnectionStatus(true);\n        });\n        this.socket.on(\"disconnect\", (reason)=>{\n            console.log(\"[DEBUG] WebSocketManager: Disconnected from WebSocket server. Reason:\", reason);\n            this.isConnected = false;\n            this.notifyConnectionStatus(false);\n        });\n        this.socket.on(\"connect_error\", (error)=>{\n            console.error(\"[DEBUG] WebSocketManager: Connection error:\", error);\n            console.log(\"[DEBUG] WebSocketManager: Reconnect attempts:\", this.reconnectAttempts);\n            this.isConnected = false;\n            this.reconnectAttempts++;\n            this.notifyError(\"Connection error: \".concat(error.message || \"Unknown error\"));\n        });\n        this.socket.on(\"error\", (error)=>{\n            console.error(\"[DEBUG] WebSocketManager: WebSocket error:\", error);\n            this.notifyError(\"WebSocket error: \".concat(error));\n        });\n        this.socket.on(\"transcription\", (text)=>{\n            console.log(\"[DEBUG] WebSocketManager: Received transcription:\", text);\n            this.notifyTranscription(text);\n        });\n    }\n    connect() {\n        console.log(\"[DEBUG] WebSocketManager: Connect called. Socket exists:\", !!this.socket);\n        if (this.socket && !this.socket.connected) {\n            console.log(\"[DEBUG] WebSocketManager: Initiating WebSocket connection...\");\n            this.socket.connect();\n        } else if (!this.socket) {\n            console.log(\"[DEBUG] WebSocketManager: Socket not initialized yet, waiting...\");\n            setTimeout(()=>this.connect(), 2000);\n        }\n    }\n    disconnect() {\n        console.log(\"[DEBUG] WebSocketManager: Disconnect called. Socket exists:\", !!this.socket);\n        if (this.socket) {\n            this.socket.disconnect();\n        }\n        this.audioBuffer = [];\n        this.isConnected = false;\n    }\n    sendAudio(chunk) {\n        if (!chunk || chunk.length === 0) {\n            console.warn(\"[DEBUG] WebSocketManager: Attempted to send empty audio chunk\");\n            return;\n        }\n        console.log(\"[DEBUG] WebSocketManager: Sending audio chunk. Connected:\", this.isConnected, \"Socket exists:\", !!this.socket);\n        if (this.isConnected && this.socket) {\n            try {\n                this.socket.emit(\"audio\", chunk);\n            } catch (error) {\n                console.error(\"[DEBUG] WebSocketManager: Error sending audio chunk:\", error);\n                this.notifyError(\"Failed to send audio data\");\n            }\n        } else {\n            console.log(\"[DEBUG] WebSocketManager: Socket not connected, buffering audio chunk\");\n            this.audioBuffer.push(chunk);\n            if (this.audioBuffer.length > 100) {\n                this.audioBuffer.shift();\n            }\n        }\n    }\n    flushAudioBuffer() {\n        if (this.audioBuffer.length > 0) {\n            console.log(\"Flushing \".concat(this.audioBuffer.length, \" buffered audio chunks\"));\n            while(this.audioBuffer.length > 0){\n                const chunk = this.audioBuffer.shift();\n                if (chunk) {\n                    this.sendAudio(chunk);\n                }\n            }\n        }\n    }\n    // Event subscription methods\n    onTranscription(callback) {\n        this.transcriptionCallbacks.add(callback);\n        return ()=>this.transcriptionCallbacks.delete(callback);\n    }\n    onError(callback) {\n        this.errorCallbacks.add(callback);\n        return ()=>this.errorCallbacks.delete(callback);\n    }\n    onConnectionChange(callback) {\n        this.connectionCallbacks.add(callback);\n        return ()=>this.connectionCallbacks.delete(callback);\n    }\n    // Event notification methods\n    notifyTranscription(text) {\n        this.transcriptionCallbacks.forEach((callback)=>callback(text));\n    }\n    notifyError(error) {\n        this.errorCallbacks.forEach((callback)=>callback(error));\n    }\n    notifyConnectionStatus(status) {\n        this.connectionCallbacks.forEach((callback)=>callback(status));\n    }\n    // Status methods\n    isSocketConnected() {\n        return this.isConnected;\n    }\n    getReconnectAttempts() {\n        return this.reconnectAttempts;\n    }\n    getSocketId() {\n        var _this_socket;\n        return ((_this_socket = this.socket) === null || _this_socket === void 0 ? void 0 : _this_socket.id) || null;\n    }\n    constructor(){\n        this.audioBuffer = [];\n        this.isConnected = false;\n        this.reconnectAttempts = 0;\n        this.maxReconnectAttempts = 5;\n        this.reconnectDelay = 1000;\n        this.maxReconnectDelay = 5000;\n        this.transcriptionCallbacks = new Set();\n        this.errorCallbacks = new Set();\n        this.connectionCallbacks = new Set();\n        console.log(\"[DEBUG] WebSocketManager: Constructor called\");\n        const initSocket = async ()=>{\n            console.log(\"[DEBUG] WebSocketManager: Initializing socket connection\");\n            try {\n                var _data_websocket;\n                console.log(\"[DEBUG] WebSocketManager: Fetching WebSocket URL from\", window.location.origin);\n                // First, try to get the WebSocket URL from the server\n                const response = await fetch(window.location.origin, {\n                    headers: {\n                        \"Accept\": \"application/json\",\n                        \"Content-Type\": \"application/json\"\n                    },\n                    credentials: \"include\"\n                });\n                console.log(\"[DEBUG] WebSocketManager: Server response status:\", response.status);\n                if (!response.ok) {\n                    throw new Error(\"Server responded with status: \".concat(response.status));\n                }\n                const data = await response.json();\n                console.log(\"[DEBUG] WebSocketManager: Server response data:\", data);\n                if (!(data === null || data === void 0 ? void 0 : (_data_websocket = data.websocket) === null || _data_websocket === void 0 ? void 0 : _data_websocket.url)) {\n                    throw new Error(\"Invalid server response: missing websocket URL\");\n                }\n                const SOCKET_URL = data.websocket.url;\n                console.log(\"[DEBUG] WebSocketManager: Using server provided WebSocket URL:\", SOCKET_URL);\n                this.initializeSocket(SOCKET_URL);\n            } catch (error) {\n                console.error(\"[DEBUG] WebSocketManager: Failed to get WebSocket URL from server:\", error);\n                // Fallback to constructing URL based on current location\n                const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n                const SOCKET_URL = \"\".concat(protocol, \"//\").concat(window.location.hostname);\n                console.log(\"[DEBUG] WebSocketManager: Using fallback WebSocket URL:\", SOCKET_URL);\n                this.initializeSocket(SOCKET_URL);\n            }\n        };\n        // Start initialization\n        initSocket();\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/websocket-manager.ts\n"));

/***/ })

});